use std::sync::Arc;

use actix_web::{post, web, App, HttpRequest, HttpResponse, HttpServer};
use chromiumoxide::{Browser, types::Error};
use log::info;

#[derive(Clone)]
struct AppState {
    browser: Arc<Browser>,
    screenshot_dir: String,
}

// pub fn start_server(app_state: AppState) {
//     let http_server_config = ("0.0.0.0", 8080);
//
//     HttpServer::new(move || {
//         App::new()
//             .app_data(web::Data::new(app_state.clone()))
//             .service(screenshot)
//     })
//     .bind(http_server_config)?
//     .run()
// }
//
// #[post("/screenshot")]
// async fn screenshot(
//     _req: HttpRequest,
//     data: web::Data<AppState>,
// ) -> Result<HttpResponse, Box<dyn std::error::Error>> {
//     info!("new comming request");
//
//     let fpp = data.browser.new_page("").await?;
//
//     let cookies = fpp.get_cookies().await?;
//
//     let png_data = data
//         .browser
//         .new_page("https://webapp.generali.co.th/eHospital/login.jsp")
//         .await?
//         .find_xpath("//input[@name='user_name']")
//         .await
//         .unwrap()
//         .click()
//         .await
//         .unwrap()
//         .type_str("Test")
//         .await?
//         .screenshot(CaptureScreenshotFormat::Png)
//         .await?;
//     let timestamp = SystemTime::now().duration_since(UNIX_EPOCH)?;
//     let filename = format!("{}/{}.png", data.screenshot_dir, timestamp.as_secs());
//     info!("Saved image {filename}");
//
//     tokio::fs::write(filename, png_data).await?;
//
//     Ok(HttpResponse::Ok().body(format!("Saved screenshot as {}", timestamp.as_secs())))
// }
